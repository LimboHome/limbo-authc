<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~  Copyright 2020-2024 Limbo Team (https://github.com/LimboHome).
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.limbo.authc.core.dao.GrantMapper" >

    <resultMap id="Account" type="org.limbo.authc.api.interfaces.beans.po.AccountPO">
        <id column="account_id" jdbcType="BIGINT" property="accountId"/>
        <result column="project_id" jdbcType="BIGINT" property="projectId"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="nick" jdbcType="VARCHAR" property="nick"/>
        <result column="last_login" jdbcType="TIMESTAMP" property="lastLogin"/>
        <result column="last_login_ip" jdbcType="VARCHAR" property="lastLoginIp"/>
        <result column="is_super_admin" jdbcType="BIT" property="isSuperAdmin"/>
        <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated"/>
        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified"/>
    </resultMap>

    <insert id="grantRoleToAccounts">
        replace into l_account_role ( project_id, account_id, role_id )
        values
            <foreach collection="accountIds" separator="," item="accountId">
                ( #{projectId}, #{accountId}, #{roleId} )
            </foreach>
    </insert>

    <insert id="grantRolesToAccount">
        replace into l_account_role ( project_id, account_id, role_id )
        values
        <foreach collection="roleIds" separator="," item="roleId">
            ( #{projectId}, #{accountId}, #{roleId} )
        </foreach>
    </insert>

    <delete id="revoke">
        delete from l_account_role where role_id = #{roleId} and project_id = #{projectId}
    </delete>

    <delete id="revokeFromAccountNotIn">
        delete from l_account_role
        where role_id = #{roleId}
              and project_id = #{projectId}
              and account_id not in (<foreach collection="accountIds" separator="," item="aid">#{aid}</foreach>)
    </delete>

    <delete id="revokeFromAccountIn">
        delete from l_account_role
        where role_id = #{roleId}
              and project_id = #{projectId}
              and account_id in (<foreach collection="accountIds" separator="," item="aid">#{aid}</foreach>)
    </delete>

    <delete id="revokeFromAccounts">
        delete from l_account_role
        where project_id = #{projectId}
              and account_id in (<foreach collection="accountIds" separator="," item="aid">#{aid}</foreach>)
    </delete>

    <select id="getGrantedUserNicks" resultType="org.limbo.authc.api.interfaces.utils.tuple.Tuple">
        select
            ar.role_id as a,
            a.nick as b
        from l_account a
        left join l_account_role ar on a.account_id = ar.account_id
        where ar.role_id in (<foreach collection="roleIds" separator="," item="rid">#{rid}</foreach>)
              and a.project_id = #{projectId}
    </select>

    <select id="getGrantedUserAccounts" resultMap="Account">
        select a.*
        from l_account a
        left join l_account_role ar on ar.account_id = a.account_id
        where ar.role_id = #{roleId}
              and a.project_id = #{projectId}
    </select>

    <select id="getGrantedRoles" resultMap="org.limbo.authc.core.dao.RoleMenuMapper.Role">
        select r.*
        from l_role r
        left join l_account_role ar on ar.role_id = r.role_id
        where ar.account_id in (<foreach collection="accountIds" separator="," item="aid">#{aid}</foreach>)
              and r.project_id = #{projectId}
    </select>

    <select id="getGrantedRoleIds" resultType="java.lang.Long">
        select role_id
        from l_account_role
        where project_id = #{projectId}
              and account_id in (<foreach collection="accountIds" separator="," item="aid">#{aid}</foreach>)
    </select>
</mapper>